{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    
    "virtualMachineSize": {
      "type": "string",
      "defaultValue": "Standard_D4s_v3",
      "metadata": {
        "description": "Virtual machine size (has to be at least the size of Standard_A3 to support 2 NICs)"
      }
    },
    "virtualMachineAdminUsername": {
      "type": "string",
      "defaultValue": "boomi",
      "metadata": {
        "description": "Specifies the name of the administrator account of the virtual machine."
      }
    },
    "virtualMachineAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the password for the virtual machine."
      }
    },
    "BoomiAuthenticationType": {
      "defaultValue": "Password",
      "allowedValues": [
        "Password",
        "Token"
      ],
      "type": "string",
      "metadata": {
        "description": "Boomi Platform Authentication Type"
      }
    },
    "BoomiAccountID": {
      "type": "string",
      "metadata": {
        "description": "The Boomi account ID that you want to associate with the new Molecule cluster."
      }
    },
    "BoomiUsername": {
      "type": "string",
      "metadata": {
        "description": "The email account associated with the Boomi account."
      }
    },
    "BoomiMFAInstallToken": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "An MFA API token generated by your Dell Boomi Administrator."
      }
    },
    "BoomiPassword": {
      "defaultValue": "",
      "type": "securestring",
      "metadata": {
        "description": "The password associated with the Boomi account."
      }
    },
    "moleculeClusterName": {
      "type": "string",
      "defaultValue": "Boomi_Molecule_VM",
      "metadata": {
        "description": "The name for the Boomi Molecule cluster."
      }
    }
  },
  "variables": {
    "contributorRoleDefinitionName": "b24988ac-6180-42a0-ab88-20f7382dd24c",

    "contributorRoleId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleDefinitionName'))]",

    "removeChar1": "[replace(resourceGroup().name, '_', '')]",
    "removeChar2": "[replace(variables('removeChar1'), '.', '')]",
    "removeChar3": "[replace(variables('removeChar2'), '(', '')]",
    "cleanResourceGroupName": "[replace(tolower(variables('removeChar3')), ')', '')]",

    "deploymentName": "[concat(variables('cleanResourceGroupName'), '-', uniqueString(resourceGroup().id))]",

    "virtualMachineUserDefinedManagedIdentityName": "[concat(variables('deploymentName'), '-virtualMachineManagedIdentity')]",
    "virtualMachineUserDefinedManagedIdentityId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities',variables('virtualMachineUserDefinedManagedIdentityName'))]",

    "virtualMachineContributorRoleAssignmentName": "[guid(concat(variables('deploymentName'), '-virtualMachineContributorRoleAssignment'))]",
    "virtualMachineContributorRoleAssignmentId": "[resourceId('Microsoft.Authorization/roleAssignments', variables('virtualMachineContributorRoleAssignmentName'))]",

    "natGatewayPublicIpAddressName": "[concat(variables('deploymentName'), '-natGatewayPublicIp')]",
    "natGatewayPublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('natGatewayPublicIpAddressName'))]",

    "natGatewayPublicIpPrefixName": "[concat(variables('deploymentName'), '-natGatewayPublicIpPrefix')]",
    "natGatewayPublicIpPrefixId": "[resourceId('Microsoft.Network/publicIPPrefixes', variables('natGatewayPublicIpPrefixName'))]",

    "natGatewayname": "[concat(variables('deploymentName'), '-natGateway')]",
    "natGatewayId": "[resourceId('Microsoft.Network/natGateways', variables('natGatewayname'))]",

    "virtualNetworkName": "[concat(variables('deploymentName'), '-virtualnetwork')]",
    
    "virtualNetworkId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",

    "virtualMachineSubnetName": "[concat(variables('deploymentName'), '-virtualMachineSubnet')]",
    "virtualMachineSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('virtualMachineSubnetName'))]",

    "applicationGatewaySubnetName": "[concat(variables('deploymentName'), '-applicationGatewaySubnet')]",
    "applicationGatewaySubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('applicationGatewaySubnetName'))]",

    "netAppFileSubnetName": "[concat(variables('deploymentName'), '-netAppFileSubnet')]",
    "netAppFileSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('netAppFileSubnetName'))]",

    "virtualMachineSubnetNsgName": "[concat(variables('deploymentName'), '-Nsg')]",
    "virtualMachineSubnetNsgId": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('virtualMachineSubnetNsgName'))]",

    "netAppFileDelegationsName": "[concat(variables('deploymentName'), '-netAppDelegation')]",

    "netAppAccountName": "[concat(variables('deploymentName'), '-netAppAccount')]",
    "netAppAccountId": "[resourceId('Microsoft.NetApp/netAppAccounts/', variables('netAppAccountName'))]",

    "netAppPoolName": "[concat(tolower(variables('netAppAccountName')), 'pool')]",
    "capacityPoolId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools', variables('netAppAccountName'), variables('netAppPoolName'))]",

    "capacityPoolName": "[concat(variables('netAppAccountName'), '/',variables('netAppPoolName'))]",
    "volumeName": "[concat(variables('netAppAccountName'), '/',variables('netAppPoolName'),'/', variables('netAppVolumeName'))]",

    "netAppVolumeName": "[concat(tolower(variables('netAppAccountName')), 'volume')]",
    "netAppVolumeId": "[resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))]",



   // "virtualMachineName": "[concat(variables('deploymentName'), '-virtualMachine')]",
    "virtualMachineName": "[concat('Node','-1')]",
    "virtualMachineId": "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]",

    "headVirtualMachineNicName": "[concat(variables('virtualMachineName'), '-headNic')]",
    "headVirtualMachineNicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('headVirtualMachineNicName'))]",

    "workerVirtualMachineNicName": "[concat(variables('virtualMachineName'), '-workerNic')]",
    "workerVirtualMachineNicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('workerVirtualMachineNicName'))]",

    "tailVirtualMachineNicName": "[concat(variables('virtualMachineName'), '-tailNic')]",
    "tailVirtualMachineNicId": "[resourceId('Microsoft.Network/networkInterfaces', variables('tailVirtualMachineNicName'))]",

    "headVirtualMachinePublicIpAddressName": "[concat(variables('virtualMachineName'),'-headPublicIp')]",
    "headVirtualMachinePublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('headVirtualMachinePublicIpAddressName'))]",

    "workerVirtualMachinePublicIpAddressName": "[concat(variables('virtualMachineName'),'-workerPublicIp')]",
    "workerVirtualMachinePublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('workerVirtualMachinePublicIpAddressName'))]",

    "tailVirtualMachinePublicIpAddressName": "[concat(variables('virtualMachineName'),'-tailPublicIp')]",
    "tailVirtualMachinePublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('tailVirtualMachinePublicIpAddressName'))]",


    "headVirtualMachineId": "[resourceId('Microsoft.Compute/virtualMachines', variables('virtualMachineName'))]",
    "workerVirtualMachineId": "[resourceId('Microsoft.Compute/virtualMachines', variables('workerVirtualMachineName'))]",
    "tailVirtualMachineId": "[resourceId('Microsoft.Compute/virtualMachines', variables('tailVirtualMachineName'))]",

   // "workerVirtualMachineName": "[concat(variables('virtualMachineName'), '-workerVM')]",
    //"tailVirtualMachineName": "[concat(variables('virtualMachineName'), '-tailVM')]",
    "workerVirtualMachineName": "[concat('Node','-2')]",
    "tailVirtualMachineName": "[concat('Node','-3')]",

    "moleculeDeploy": "[concat(variables('virtualMachineName'),'/molecule-deployments')]",

    "applicationGatewayPublicIPAddressName": "[concat(variables('deploymentName'), '-applicationGatewayPublicIp')]",
    "applicationGatewayPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('applicationGatewayPublicIPAddressName'))]",

    "applicationGatewayName": "[concat(variables('deploymentName'), '-applicationGateway')]",
    "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName'))]",

    "applicationGatewaySSLCert": "[concat(variables('deploymentName'), '-appGatewaySslCert')]",

    "applicationGatewayIPConfigurationName": "applicationGatewayIPConfiguration",
    "applicationGatewayFrontendIPConfigurationName": "applicationGatewayFrontendIPConfiguration",
    "applicationGatewayFrontendIPConfigurationId": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), variables('applicationGatewayFrontendIPConfigurationName'))]",
    "applicationGatewayHttpFrontendPortName": "applicationGatewayHttpFrontendPort",
    "applicationGatewayHttpFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), variables('applicationGatewayHttpFrontendPortName'))]",
    "applicationGatewayHttpsFrontendPortName": "applicationGatewayHttpsFrontendPort",
    "applicationGatewayHttpsFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), variables('applicationGatewayHttpsFrontendPortName'))]",

    "applicationGatewayMoleculeFrontendPortName": "applicationGatewayMoleculeFrontendPort",
    "applicationGatewayMoleculeFrontendPortId": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), variables('applicationGatewayMoleculeFrontendPortName'))]",

    "applicationGatewayHttpListenerName": "applicationGatewayHttpListener",
    "applicationGatewayHttpListenerId": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), variables('applicationGatewayHttpListenerName'))]",
    "applicationGatewayHttpsListenerName": "applicationGatewayHttpsListener",
    "applicationGatewayHttpsListenerId": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), variables('applicationGatewayHttpsListenerName'))]",
    "applicationGatewayBackendAddressPoolName": "applicationGatewayBackendPool",
    "applicationGatewayBackendAddressPoolId": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), variables('applicationGatewayBackendAddressPoolName'))]",
    "applicationGatewayBackendHttpSettingsName": "applicationGatewayBackendHttpSettings",
    "applicationGatewayBackendHttpSettingsId": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), variables('applicationGatewayBackendHttpSettingsName'))]",
    "applicationGatewayHttpRequestRoutingRuleName": "httpRule",
    "applicationGatewayHttpsRequestRoutingRuleName": "httpsRule"
  },
  "resources": [
    {
      "comments": "User-Defined Managed Identity defined for the Azure Virtual Machine. Used to access the Virtual Network and other resources.",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('virtualMachineUserDefinedManagedIdentityName')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[variables('virtualMachineContributorRoleAssignmentName')]",
      "dependsOn": [
        "[variables('virtualMachineUserDefinedManagedIdentityId')]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('contributorRoleId')]",
        "principalId": "[reference(variables('virtualMachineUserDefinedManagedIdentityName')).principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "name": "[variables('applicationGatewayPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 30
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "name": "[variables('natGatewayPublicIpAddressName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 30
      }
    },
    {
      "type": "Microsoft.Network/publicIPPrefixes",
      "apiVersion": "2020-07-01",
      "name": "[variables('natGatewayPublicIpPrefixName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "prefixLength": 31,
        "publicIPAddressVersion": "IPv4"
      }
    },
    {
      "type": "Microsoft.Network/natGateways",
      "apiVersion": "2020-07-01",
      "name": "[variables('natGatewayname')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('natGatewayPublicIpAddressId')]",
        "[variables('natGatewayPublicIpPrefixId')]"
      ],
      "properties": {
        "idleTimeoutInMinutes": 4,
        "publicIpAddresses": [
          {
            "id": "[variables('natGatewayPublicIpAddressId')]"
          }
        ],
        "publicIpPrefixes": [
          {
            "id": "[variables('natGatewayPublicIpPrefixId')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('virtualMachineSubnetNsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-ssh-inbound",
            "properties": {
              "priority": 100,
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "protocol": "Tcp",
              "sourceAddressPrefix": "0.0.0.0/0",
              "destinationAddressPrefix": "10.0.16.128/25"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2020-07-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('virtualMachineSubnetNsgId')]",
        "[variables('natGatewayId')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/19"
          ]
        },
        "dhcpOptions": {
          "dnsServers": []
        },
        "subnets": [
          {
            "name": "[variables('virtualMachineSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.16.128/25",
              "networkSecurityGroup": {
                "id": "[variables('virtualMachineSubnetNsgId')]"
              },
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.KeyVault",
                  "locations": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "name": "[variables('applicationGatewaySubnetName')]",
            "properties": {
              "addressPrefix": "10.0.16.0/25",
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.KeyVault",
                  "locations": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "name": "[variables('netAppFileSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.17.0/25",
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled",
              "delegations": [
                {
                  "name": "[variables('netAppFileDelegationsName')]",
                  "properties": {
                    "serviceName": "Microsoft.NetApp/volumes"
                  }
                }
              ]
            }
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false,
        "enableVmProtection": false
      }
    },
    {
      "name": "[variables('netAppAccountName')]",
      "type": "Microsoft.NetApp/netAppAccounts",
      "apiVersion": "2020-11-01",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "name": "[variables('capacityPoolName')]",
      "type": "Microsoft.NetApp/netAppAccounts/capacityPools",
      "apiVersion": "2020-11-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('netAppAccountId')]"
      ],
      "properties": {
        "serviceLevel": "Standard",
        "size": 4398046511104
      }
    },
    {
      "name": "[variables('volumeName')]",
      "type": "Microsoft.NetApp/netAppAccounts/capacityPools/volumes",
      "apiVersion": "2020-11-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('capacityPoolId')]",
        "[variables('virtualNetworkId')]"
      ],
      "properties": {
        "serviceLevel": "Standard",
        "creationToken": "[variables('netAppVolumeName')]",
        "usageThreshold": 107374182400,
        "exportPolicy": {
          "rules": [
            {
              "ruleIndex": 1,
              "unixReadOnly": false,
              "unixReadWrite": true,
              "cifs": false,
              "nfsv3": true,
              "nfsv41": false,
              "chownMode": "Unrestricted",
              "allowedClients": "10.0.0.0/19"
            }
          ]
        },
        "protocolTypes": [
          "NFSv3"
        ],
        "subnetId": "[variables('netAppFileSubnetId')]",
        "snapshotDirectoryVisible": false
      }
    },
    {
      "name": "[variables('headVirtualMachinePublicIpAddressName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 30
      }
    },
    {
      "name": "[variables('workerVirtualMachinePublicIpAddressName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 30
      }
    },
    {
      "name": "[variables('tailVirtualMachinePublicIpAddressName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Static",
        "idleTimeoutInMinutes": 30
      }
    },
    {
      "name": "[variables('headVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('virtualNetworkId')]",
        "[variables('headVirtualMachinePublicIpAddressId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[ concat(variables('virtualMachineName'), '-ipconfig1') ]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('virtualMachineSubnetId')]"
              },
              "publicIpAddress": {
                "id": "[variables('headVirtualMachinePublicIpAddressId')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('workerVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('virtualNetworkId')]",
        "[variables('workerVirtualMachinePublicIpAddressId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[ concat(variables('virtualMachineName'), '-ipconfig1') ]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('virtualMachineSubnetId')]"
              },
              "publicIpAddress": {
                "id": "[variables('workerVirtualMachinePublicIpAddressId')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('tailVirtualMachineNicName')]",
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-07-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('virtualNetworkId')]",
        "[variables('tailVirtualMachinePublicIpAddressId')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "[ concat(variables('virtualMachineName'), '-ipconfig1') ]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('virtualMachineSubnetId')]"
              },
              "publicIpAddress": {
                "id": "[variables('tailVirtualMachinePublicIpAddressId')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "[variables('virtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('virtualMachineUserDefinedManagedIdentityId')]": {}
        }
      },
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('virtualNetworkId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]"
      ],

      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computerName": "[variables('virtualMachineName')]",
          "adminUsername": "[parameters('virtualMachineAdminUsername')]",
          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "canonical",
            "offer": "0001-com-ubuntu-server-focal",
            "sku": "20_04-lts",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('virtualMachineName'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 50,
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('headVirtualMachineNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[variables('moleculeDeploy')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('headVirtualMachineId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/Ganesh-Yeole/boomi-azure-quickstart/main/scripts/deployment.sh"
          ],
          "commandToExecute": "[concat('./deployment.sh', ' --resource_group \"', resourceGroup().name, '\" --molecule_cluster_name \"', parameters('moleculeClusterName'), '\" --boomi_auth \"', parameters('BoomiAuthenticationType'), '\" --boomi_token \"', parameters('BoomiMFAInstallToken'), '\" --boomi_username \"', parameters('BoomiUsername'), '\" --boomi_password \"', parameters('BoomiPassword'), '\" --boomi_account \"', parameters('BoomiAccountID'), '\" --fileshare \"', variables('netAppVolumeName'), '\" --netAppIP \"', reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes/', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))).mountTargets[0].ipAddress, '\" --node_type head\"','\"')]"
        }
      }
    },
    {
      "name": "[variables('workerVirtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('virtualMachineUserDefinedManagedIdentityId')]": {}
        }
      },
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('virtualNetworkId')]",
        "[variables('headVirtualMachineId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'),'/extensions/molecule-deployments')]"
      ],

      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computerName": "[variables('workerVirtualMachineName')]",
          "adminUsername": "[parameters('virtualMachineAdminUsername')]",
          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "canonical",
            "offer": "0001-com-ubuntu-server-focal",
            "sku": "20_04-lts",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('workerVirtualMachineName'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 50,
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('workerVirtualMachineNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('workerVirtualMachineName'),'/molecule-deployments2')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('workerVirtualMachineId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'),'/extensions/molecule-deployments')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/Ganesh-Yeole/boomi-azure-quickstart/main/scripts/deployment.sh"
          ],
          "commandToExecute": "[concat('./deployment.sh', ' --resource_group \"', resourceGroup().name, '\" --molecule_cluster_name \"', parameters('moleculeClusterName'), '\" --boomi_auth \"', parameters('BoomiAuthenticationType'), '\" --boomi_token \"', parameters('BoomiMFAInstallToken'), '\" --boomi_username \"', parameters('BoomiUsername'), '\" --boomi_password \"', parameters('BoomiPassword'), '\" --boomi_account \"', parameters('BoomiAccountID'), '\" --fileshare \"', variables('netAppVolumeName'), '\" --netAppIP \"', reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes/', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))).mountTargets[0].ipAddress, '\" --node_type worker\"','\"')]"
        }
      }
    },
    {
      "name": "[variables('tailVirtualMachineName')]",
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[variables('virtualMachineUserDefinedManagedIdentityId')]": {}
        }
      },
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('virtualNetworkId')]",
        "[variables('workerVirtualMachineId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'),'/extensions/molecule-deployments')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('virtualMachineSize')]"
        },
        "osProfile": {
          "computerName": "[variables('tailVirtualMachineName')]",
          "adminUsername": "[parameters('virtualMachineAdminUsername')]",
          "adminPassword": "[parameters('virtualMachineAdminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "canonical",
            "offer": "0001-com-ubuntu-server-focal",
            "sku": "20_04-lts",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('tailVirtualMachineName'),'_OSDisk')]",
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": 50,
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('tailVirtualMachineNicName'))]"
            }
          ]
        }
      }
    },
    {
      "name": "[concat(variables('tailVirtualMachineName'),'/molecule-deployments3')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "apiVersion": "2020-12-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('netAppVolumeId')]",
        "[variables('tailVirtualMachineId')]",
        "[variables('virtualMachineContributorRoleAssignmentId')]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('virtualMachineName'),'/extensions/molecule-deployments')]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/Ganesh-Yeole/boomi-azure-quickstart/main/scripts/deployment.sh"
          ],
          "commandToExecute": "[concat('./deployment.sh', ' --resource_group \"', resourceGroup().name, '\" --molecule_cluster_name \"', parameters('moleculeClusterName'), '\" --boomi_auth \"', parameters('BoomiAuthenticationType'), '\" --boomi_token \"', parameters('BoomiMFAInstallToken'), '\" --boomi_username \"', parameters('BoomiUsername'), '\" --boomi_password \"', parameters('BoomiPassword'), '\" --boomi_account \"', parameters('BoomiAccountID'), '\" --fileshare \"', variables('netAppVolumeName'), '\" --netAppIP \"', reference(resourceId('Microsoft.NetApp/netAppAccounts/capacityPools/volumes/', variables('netAppAccountName'), variables('netAppPoolName'), variables('netAppVolumeName'))).mountTargets[0].ipAddress, '\" --node_type tail\"','\"')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-11-01",
      "name": "[variables('applicationGatewayName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('virtualNetworkId')]",
        "[variables('applicationGatewayPublicIPAddressId')]",
        "[variables('headVirtualMachineId')]",
        "[variables('workerVirtualMachineId')]",
        "[variables('tailVirtualMachineId')]"
      ],
     // "zones": "",
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2"
        },
        "gatewayIPConfigurations": [
          {
            "name": "[variables('applicationGatewayIPConfigurationName')]",
            "properties": {
              "subnet": {
                "id": "[variables('applicationGatewaySubnetId')]"
              }
            }
          }
        ],
        "sslCertificates": [],
        "trustedRootCertificates": [],
        "trustedClientCertificates": [],
        "sslProfiles": [],
        "frontendIPConfigurations": [
          {
            "name": "[variables('applicationGatewayFrontendIPConfigurationName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[variables('applicationGatewayPublicIPAddressId')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "[variables('applicationGatewayHttpFrontendPortName')]",
            "properties": {
              "Port": 80
            }
          },
          {
            "name": "[variables('applicationGatewayHttpsFrontendPortName')]",
            "properties": {
              "Port": 443
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('applicationGatewayBackendAddressPoolName')]",
            "properties": {
              "backendAddresses": [
                {
                  "ipAddress": "[reference(variables('headVirtualMachineNicName')).ipConfigurations[0].properties.privateIPAddress]"
                },
                {
                  "ipAddress": "[reference(variables('workerVirtualMachineNicName')).ipConfigurations[0].properties.privateIPAddress]"
                },
                {
                  "ipAddress": "[reference(variables('tailVirtualMachineNicName')).ipConfigurations[0].properties.privateIPAddress]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "[variables('applicationGatewayBackendHttpSettingsName')]",
            "properties": {
              "port": 9090,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/probes/boomi-molecule-ingress')]"
              }
            }
          },
          {
            "name": "defaulthttpsetting",
            "properties": {
              "port": 80,
              "protocol": "Http",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/probes/defaultHttpProbe')]"
              }
            }
          },
          {
            "name": "defaulthttpssetting",
            "properties": {
              "port": 443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": false,
              "requestTimeout": 30,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', variables('applicationGatewayName')), '/probes/defaultHttpsProbe')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "[variables('applicationGatewayHttpListenerName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('applicationGatewayFrontendIPConfigurationId')]"
              },
              "frontendPort": {
                "id": "[variables('applicationGatewayHttpFrontendPortId')]"
              },
              "protocol": "Http",
              "hostNames": [],
              "requireServerNameIndication": false
            }
          }
        ],
        "urlPathMaps": [],
        "requestRoutingRules": [
          {
            "Name": "[variables('applicationGatewayHttpRequestRoutingRuleName')]",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[variables('applicationGatewayHttpListenerId')]"
              },
              "backendAddressPool": {
                "id": "[variables('applicationGatewayBackendAddressPoolId')]"
              },
              "backendHttpSettings": {
                "id": "[variables('applicationGatewayBackendHttpSettingsId')]"
              }
            }
          }
        ],
        "enableHttp2": false,
        "autoscaleConfiguration": {
          "minCapacity": 2,
          "maxCapacity": 10
        },
        "probes": [
          {
            "name": "defaultHttpProbe",
            "properties": {
              "protocol": "Http",
              "host": "localhost",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {}
            }
          },
          {
            "name": "defaultHttpsProbe",
            "properties": {
              "protocol": "Https",
              "host": "localhost",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {}
            }
          },
          {
            "name": "boomi-molecule-ingress",
            "properties": {
              "protocol": "Http",
              "host": "localhost",
              "path": "/_admin/status",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": false,
              "minServers": 0,
              "match": {}
            }
          }
        ],
        "rewriteRuleSets": [],
        "redirectConfigurations": [],
        "privateLinkConfigurations": []
      }
    }
  ],
  "outputs": {
    "headVirtualMachinePublicIpAddress": {
      "value": "[reference(variables('headVirtualMachinePublicIpAddressName')).ipAddress]",
      "type": "string"
    },
    "workerVirtualMachinePublicIpAddress": {
      "value": "[reference(variables('workerVirtualMachinePublicIpAddressName')).ipAddress]",
      "type": "string"
    },
    "tailVirtualMachinePublicIpAddress": {
      "value": "[reference(variables('tailVirtualMachinePublicIpAddressName')).ipAddress]",
      "type": "string"
    }
  }
}
